# -*- coding: utf-8 -*-
"""
Created on Fri May 29 19:55:10 2015

@author: gustavo
"""
import numpy as np
import math
from skimage import io
from skimage.color import rgb2gray
from skimage import measure
from skimage import morphology
from skimage import filter

extensions = ['jpeg', 'jpg']
root = '/home/gustavo/Dropbox/Doutorado/Disciplinas/Visão/Projeto/Q8/circinatum'

import os
#abre arquivo com imagens
walk_gen = os.walk(root)
for root,dirs,files in walk_gen:
	for ext in extensions:
          images = [os.sep.join([root, cur_file]) for cur_file in files if cur_file.endswith('.{0}'.format(ext))]
           
        #  if images:
              
          #    img = Image.open(images[0])
          #    img.show()


#------------------------

#Trocar w por a+ se quiser adicionar no fim do arquivo
arquivo = open('/home/gustavo/Dropbox/Doutorado/Disciplinas/Visão/Projeto/Q8/folhas.data','w')


#----


#Percorrer as imagens calculando curvatura, área, esqueleto etc...  
print len(images)
for i in range(len(images)):
    print "teste"
    r = io.imread(images[i])
    r = rgb2gray(r)
    val = filter.threshold_otsu(r) #Aplicar otsu para binarizar a imagem
    r = r<val 
    # Find contours at a constant value of 0.5
    contours = measure.find_contours(r, 0.5)


    arclen=0.0
    for n, contour in enumerate(contours):
        arclenTemp=0.0
        for indice, valor in enumerate(contour):
            if indice > 0:
                d1 = math.fabs(round(valor[0]) - round(contour[indice-1,0]))
                d2 = math.fabs(round(valor[1]) - round(contour[indice-1,1]))
                if d1+d2>1.0:
                    arclenTemp+=math.sqrt(2)
                elif d1+d2 == 1:
                    arclenTemp+=1
        if arclenTemp > arclen:
            arclen = arclenTemp
            bestn = n
        
        #Transforma a lista contours[bestn] em uma matriz[n,2]
    aux = np.asarray(contours[bestn])
    aux = aux.astype(int) #Transforma os valores da matriz em inteiros

#---------------------------  Curvatura --------------
    vetor = [] #vetor que irá receber as curvaturas k(t)

    
    for i in range(len(aux)-2):    #Percorrer ate -2 para não pegar elementos inexistentes
    #print aux[q,0]
#---------------------------  Curvatura --------------
#Inverter as posições em relação a fórmula pois o x esta no lugar do y
#i = 2
        b1 = ( (aux[i-2,1]+aux[i+2,1]) + (2*(aux[i-1,1] + aux[i+1,1])) - (6*aux[i,1]) ) / 12
#print b1
        b2 = ( (aux[i-2,0]+aux[i+2,0]) + (2*(aux[i-1,0] + aux[i+1,0])) - (6*aux[i,0]) ) / 12
#print b2
        c1 = ( (aux[i+2,1]-aux[i-2,1]) + (4*(aux[i+1,1] - aux[i-1,1])) ) / 12
#print c1
        c2 = ( (aux[i+2,0]-aux[i-2,0]) + (4*(aux[i+1,0] - aux[i-1,0])) ) / 12
#print c2
        k = (2*(c1*b1 - c2*b2)) / ((c1**2 + c2**2)**(3/2))
 #   print k
    
        vetor.append(k) #append: insere objeto no final da lista



#-------------- Média da Curvatura---------------
    print "\nMédia da Curvatura"
    print np.mean(vetor)
    mcurv = np.mean(vetor)

#-----------------------------------------
#print "\nTamanho do array do contorno"
#print np.shape(contours[bestn])

    print "\nComprimento de Arco = Perímetro"
    print arclen

#---------------- Area ----------------------
    print "\nArea"
    a = np.sum(r) #Soma dos pixels iguais a 1
    print a

#_--------------  Esqueleto ----------
    im_sk = morphology.medial_axis(r)
    area_esq = np.sum(im_sk)
    print "\n Numero de pixels do esqueleto"
    print area_esq
    
    

    arquivo.write('{}'.format(mcurv)+",") # Converter a para string para poder salvar em arquivo
    arquivo.write('{}'.format(arclen)+",")
    arquivo.write('{}'.format(a)+",")
    arquivo.write('{}'.format(area_esq)+",")
    arquivo.write("circinatum\n")
arquivo.close
   # fig, ax = plt.subplots()
  #  ax.imshow(r, interpolation='nearest', cmap=plt.cm.gray)
